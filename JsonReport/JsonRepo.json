[
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 10452359800,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "duration": 199509000,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 6,
        "name": "To validate the login with invalid username and invalid password",
        "description": "",
        "id": "to-validate-the-login-functionality-for-amazon;to-validate-the-login-with-invalid-username-and-invalid-password",
        "after": [
          {
            "result": {
              "duration": 730300,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition2()"
            }
          },
          {
            "result": {
              "duration": 72900,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4269307800,
              "status": "passed"
            },
            "line": 7,
            "name": "To launch the chrome browser and max the browser",
            "match": {
              "location": "AmazonStepDefinition.to_launch_the_chrome_browser_and_max_the_browser()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1939865400,
              "status": "passed"
            },
            "line": 8,
            "name": "To launch the amazon url",
            "match": {
              "location": "AmazonStepDefinition.to_launch_the_amazon_url()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 735245600,
              "status": "passed"
            },
            "line": 9,
            "name": "To pass the invalid username or phoneNo in email field",
            "match": {
              "location": "AmazonStepDefinition.to_pass_the_invalid_username_or_phoneNo_in_email_field(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "username1",
                  "abc@gmail.com"
                ]
              },
              {
                "cells": [
                  "username2",
                  "def@gmil.com"
                ]
              },
              {
                "cells": [
                  "username3",
                  "xyz@gmail.com"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1083445500,
              "status": "passed"
            },
            "line": 15,
            "name": "To click the Continue button",
            "match": {
              "location": "AmazonStepDefinition.to_click_the_Continue_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 168679200,
              "status": "passed"
            },
            "line": 16,
            "name": "To pass the invalid password in password field",
            "match": {
              "location": "AmazonStepDefinition.toPassTheInvalidPasswordInPasswordField(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "password1",
                  "password2",
                  "password3"
                ]
              },
              {
                "cells": [
                  "abc@123",
                  "def@123",
                  "xyz@123"
                ]
              },
              {
                "cells": [
                  "py@123",
                  "cucumber@123",
                  "fg@123"
                ]
              },
              {
                "cells": [
                  "vc@123",
                  "lmn@123",
                  "jhg@123f"
                ]
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184865300,
              "status": "passed"
            },
            "line": 22,
            "name": "To click the signin button",
            "match": {
              "location": "AmazonStepDefinition.toClickTheSigninButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1371790200,
              "status": "passed"
            },
            "line": 23,
            "name": "To close the browser",
            "match": {
              "location": "FacebookLogin.to_close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature2"
          },
          {
            "name": "@Regression"
          }
        ]
      }
    ],
    "name": "To Validate the login functionality for amazon",
    "description": "",
    "id": "to-validate-the-login-functionality-for-amazon",
    "keyword": "Feature",
    "uri": "src/test/resources/Amazon.feature",
    "tags": [
      {
        "name": "@feature2",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 3699872700,
              "status": "passed"
            },
            "line": 5,
            "name": "To launch the browser and max window",
            "match": {
              "location": "FacebookLogin.to_launch_the_browser_and_max_window()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 2408596200,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "duration": 498423800,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 8,
        "name": "To validate login with valid username and valid password",
        "description": "",
        "id": "to-validate-the-login-functionality-of-facebook-application;to-validate-login-with-valid-username-and-valid-password",
        "after": [
          {
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image.png"
              }
            ],
            "result": {
              "duration": 237890100,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1641942200,
              "status": "passed"
            },
            "line": 9,
            "name": "To launch the url of the application",
            "match": {
              "location": "FacebookLogin.to_launch_the_url_of_the_application()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 423422600,
              "status": "passed"
            },
            "line": 10,
            "name": "To pass vaild username in email field",
            "match": {
              "location": "FacebookLogin.to_pass_vaild_username_in_email_field()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError\r\n\tat org.junit.Assert.fail(Assert.java:86)\r\n\tat org.junit.Assert.assertTrue(Assert.java:41)\r\n\tat org.junit.Assert.assertTrue(Assert.java:52)\r\n\tat org.stepdefinition.FacebookLogin.to_pass_vaild_password_in_password_field(FacebookLogin.java:39)\r\n\tat ✽.To pass vaild password in password field(src/test/resources/Facebook.feature:12)\r\n",
              "duration": 190237800,
              "status": "failed"
            },
            "line": 12,
            "name": "To pass vaild password in password field",
            "match": {
              "location": "FacebookLogin.to_pass_vaild_password_in_password_field()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12100,
              "status": "skipped"
            },
            "line": 13,
            "name": "To click the login button",
            "match": {
              "location": "FacebookLogin.to_click_the_login_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7900,
              "status": "skipped"
            },
            "line": 14,
            "name": "To close the browser",
            "match": {
              "location": "FacebookLogin.to_close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature1"
          },
          {
            "name": "@Smoke"
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7627711300,
              "status": "passed"
            },
            "line": 5,
            "name": "To launch the browser and max window",
            "match": {
              "location": "FacebookLogin.to_launch_the_browser_and_max_window()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 5031344600,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "duration": 391110400,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 25,
        "name": "To validate the positive and negative testcases in login field",
        "description": "",
        "id": "to-validate-the-login-functionality-of-facebook-application;to-validate-the-positive-and-negative-testcases-in-login-field;;2",
        "after": [
          {
            "result": {
              "duration": 128500,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2142671900,
              "status": "passed"
            },
            "line": 18,
            "name": "launch the url of the application",
            "match": {
              "location": "Sample.launch_the_url_of_the_application()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 191280900,
              "status": "passed"
            },
            "line": 19,
            "name": "pass the positive and negative \"abc@gmail.com\" in email field",
            "match": {
              "arguments": [
                {
                  "val": "\"abc@gmail.com\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_email_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 128935400,
              "status": "passed"
            },
            "line": 20,
            "name": "pass the positive and negative \"abc123\" in password field",
            "match": {
              "arguments": [
                {
                  "val": "\"abc123\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_password_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1947247100,
              "status": "passed"
            },
            "line": 21,
            "name": "close the browser",
            "match": {
              "location": "Sample.close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature1"
          },
          {
            "name": "@Sanity"
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 9419885100,
              "status": "passed"
            },
            "line": 5,
            "name": "To launch the browser and max window",
            "match": {
              "location": "FacebookLogin.to_launch_the_browser_and_max_window()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 7214837800,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "duration": 229718100,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 26,
        "name": "To validate the positive and negative testcases in login field",
        "description": "",
        "id": "to-validate-the-login-functionality-of-facebook-application;to-validate-the-positive-and-negative-testcases-in-login-field;;3",
        "after": [
          {
            "result": {
              "duration": 29900,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2278124700,
              "status": "passed"
            },
            "line": 18,
            "name": "launch the url of the application",
            "match": {
              "location": "Sample.launch_the_url_of_the_application()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 204225700,
              "status": "passed"
            },
            "line": 19,
            "name": "pass the positive and negative \"def@gmail.com\" in email field",
            "match": {
              "arguments": [
                {
                  "val": "\"def@gmail.com\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_email_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 494817800,
              "status": "passed"
            },
            "line": 20,
            "name": "pass the positive and negative \"def1223\" in password field",
            "match": {
              "arguments": [
                {
                  "val": "\"def1223\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_password_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15320494500,
              "status": "passed"
            },
            "line": 21,
            "name": "close the browser",
            "match": {
              "location": "Sample.close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature1"
          },
          {
            "name": "@Sanity"
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7800,
              "status": "skipped"
            },
            "line": 5,
            "name": "To launch the browser and max window",
            "match": {
              "location": "FacebookLogin.to_launch_the_browser_and_max_window()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "error_message": "org.openqa.selenium.SessionNotCreatedException: Could not start a new session. Response code 500. Message: disconnected: received Inspector.detached event\n  (failed to check if window was closed: disconnected: unable to connect to renderer)\n  (Session info: chrome\u003d106.0.5249.119)\nBuild info: version: \u00274.0.0\u0027, revision: \u00273a21814679\u0027\nSystem info: host: \u0027PARKAVI\u0027, ip: \u0027192.168.2.130\u0027, os.name: \u0027Windows 11\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u00271.8.0_341\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCommand: [null, newSession {capabilities\u003d[Capabilities {browserName: chrome, goog:chromeOptions: {args: [], extensions: []}}], desiredCapabilities\u003dCapabilities {browserName: chrome, goog:chromeOptions: {args: [], extensions: []}}}]\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:126)\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:84)\r\n\tat org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:62)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:156)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:164)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:139)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:559)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:246)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.\u003cinit\u003e(RemoteWebDriver.java:168)\r\n\tat org.openqa.selenium.chromium.ChromiumDriver.\u003cinit\u003e(ChromiumDriver.java:108)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:104)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:91)\r\n\tat org.openqa.selenium.chrome.ChromeDriver.\u003cinit\u003e(ChromeDriver.java:46)\r\n\tat org.stepdefinition.BaseClass.browserLaunch(BaseClass.java:30)\r\n\tat org.stepdefinition.HooksClasses.preCondition1(HooksClasses.java:18)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:40)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n",
              "duration": 38524958000,
              "status": "failed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchSessionException: Session ID is null. Using WebDriver after calling quit()?\nBuild info: version: \u00274.0.0\u0027, revision: \u00273a21814679\u0027\nSystem info: host: \u0027PARKAVI\u0027, ip: \u0027192.168.2.130\u0027, os.name: \u0027Windows 11\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u00271.8.0_341\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCommand: [null, maximizeCurrentWindow {}]\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 106.0.5249.119, chrome: {chromedriverVersion: 106.0.5249.61 (511755355844..., userDataDir: C:\\Users\\anipa\\AppData\\Loca...}, goog:chromeOptions: {debuggerAddress: localhost:54486}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:54486/devtoo..., se:cdpVersion: 106.0.5249.119, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:145)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:164)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:139)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:559)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:618)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.maximize(RemoteWebDriver.java:928)\r\n\tat org.stepdefinition.BaseClass.browserMaximize(BaseClass.java:52)\r\n\tat org.stepdefinition.HooksClasses.preCondition2(HooksClasses.java:23)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:40)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n",
              "duration": 1954800,
              "status": "failed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 27,
        "name": "To validate the positive and negative testcases in login field",
        "description": "",
        "id": "to-validate-the-login-functionality-of-facebook-application;to-validate-the-positive-and-negative-testcases-in-login-field;;4",
        "after": [
          {
            "result": {
              "error_message": "org.openqa.selenium.NoSuchSessionException: Session ID is null. Using WebDriver after calling quit()?\nBuild info: version: \u00274.0.0\u0027, revision: \u00273a21814679\u0027\nSystem info: host: \u0027PARKAVI\u0027, ip: \u0027192.168.2.130\u0027, os.name: \u0027Windows 11\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u00271.8.0_341\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCommand: [null, screenshot {}]\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 106.0.5249.119, chrome: {chromedriverVersion: 106.0.5249.61 (511755355844..., userDataDir: C:\\Users\\anipa\\AppData\\Loca...}, goog:chromeOptions: {debuggerAddress: localhost:54486}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:54486/devtoo..., se:cdpVersion: 106.0.5249.119, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:145)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:164)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:139)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:559)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:614)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:618)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:349)\r\n\tat org.stepdefinition.HooksClasses.postCondition1(HooksClasses.java:35)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:48)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n",
              "duration": 384100,
              "status": "failed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2900,
              "status": "skipped"
            },
            "line": 18,
            "name": "launch the url of the application",
            "match": {
              "location": "Sample.launch_the_url_of_the_application()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2600,
              "status": "skipped"
            },
            "line": 19,
            "name": "pass the positive and negative \"ghi@gmail.com\" in email field",
            "match": {
              "arguments": [
                {
                  "val": "\"ghi@gmail.com\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_email_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2400,
              "status": "skipped"
            },
            "line": 20,
            "name": "pass the positive and negative \"ghi123\" in password field",
            "match": {
              "arguments": [
                {
                  "val": "\"ghi123\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_password_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2600,
              "status": "skipped"
            },
            "line": 21,
            "name": "close the browser",
            "match": {
              "location": "Sample.close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature1"
          },
          {
            "name": "@Sanity"
          }
        ]
      },
      {
        "line": 4,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 2238736700,
              "status": "passed"
            },
            "line": 5,
            "name": "To launch the browser and max window",
            "match": {
              "location": "FacebookLogin.to_launch_the_browser_and_max_window()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 2203193100,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition1()"
            }
          },
          {
            "result": {
              "duration": 131733900,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.preCondition2()"
            }
          }
        ],
        "line": 28,
        "name": "To validate the positive and negative testcases in login field",
        "description": "",
        "id": "to-validate-the-login-functionality-of-facebook-application;to-validate-the-positive-and-negative-testcases-in-login-field;;5",
        "after": [
          {
            "result": {
              "duration": 29200,
              "status": "passed"
            },
            "match": {
              "location": "HooksClasses.postCondition1(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1463010100,
              "status": "passed"
            },
            "line": 18,
            "name": "launch the url of the application",
            "match": {
              "location": "Sample.launch_the_url_of_the_application()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 102826100,
              "status": "passed"
            },
            "line": 19,
            "name": "pass the positive and negative \"xyz@gmail.com\" in email field",
            "match": {
              "arguments": [
                {
                  "val": "\"xyz@gmail.com\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_email_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 99662500,
              "status": "passed"
            },
            "line": 20,
            "name": "pass the positive and negative \"xyz123\" in password field",
            "match": {
              "arguments": [
                {
                  "val": "\"xyz123\"",
                  "offset": 31
                }
              ],
              "location": "Sample.pass_the_positive_and_negative_in_password_field(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 934543000,
              "status": "passed"
            },
            "line": 21,
            "name": "close the browser",
            "match": {
              "location": "Sample.close_the_browser()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@feature1"
          },
          {
            "name": "@Sanity"
          }
        ]
      }
    ],
    "name": "To Validate the login functionality of facebook application",
    "description": "",
    "id": "to-validate-the-login-functionality-of-facebook-application",
    "keyword": "Feature",
    "uri": "src/test/resources/Facebook.feature",
    "tags": [
      {
        "name": "@feature1",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]